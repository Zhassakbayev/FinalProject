-- MySQL Script generated by MySQL Workbench
-- Sat Jan 26 12:15:20 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema University_Admissions
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema University_Admissions
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `University_Admissions` DEFAULT CHARACTER SET utf8 ;
USE `University_Admissions` ;

-- -----------------------------------------------------
-- Table `University_Admissions`.`USER`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`USER` (
  `USER_ID` INT NOT NULL AUTO_INCREMENT,
  `FIRST_NAME` VARCHAR(45) NOT NULL,
  `LAST_NAME` VARCHAR(45) NOT NULL,
  `SECOND_NAME` VARCHAR(45) NOT NULL,
  `DATE_OF_BIRTH` DATE NULL,
  `EMAIL` VARCHAR(255) NOT NULL,
  `PASSWORD` VARCHAR(32) NOT NULL,
  `ROLE` ENUM('client', 'admin') NOT NULL,
  `LANG` ENUM('RU', 'EN') NOT NULL DEFAULT 'ru',
  PRIMARY KEY (`USER_ID`),
  UNIQUE INDEX `ID_UNIQUE` (`USER_ID` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`EMAIL` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University_Admissions`.`ENTRANT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`ENTRANT` (
  `ENTRANT_ID` INT NOT NULL AUTO_INCREMENT,
  `IIN` VARCHAR(12) NOT NULL,
  `CITY` VARCHAR(45) NOT NULL,
  `DISTRICT` VARCHAR(45) NOT NULL,
  `SCHOOL_NAME` VARCHAR(45) NOT NULL,
  `USER_ID` INT NOT NULL,
  `IS_BLOCKED` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ENTRANT_ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ENTRANT_ID` ASC) VISIBLE,
  UNIQUE INDEX `IIN_UNIQUE` (`IIN` ASC) VISIBLE,
  UNIQUE INDEX `USER_ID_UNIQUE` (`USER_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Entrant_User`
    FOREIGN KEY (`USER_ID`)
    REFERENCES `University_Admissions`.`USER` (`USER_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University_Admissions`.`FACULTY`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`FACULTY` (
  `FACULTY_ID` INT NOT NULL AUTO_INCREMENT,
  `NAME_RU` VARCHAR(100) NOT NULL,
  `NAME_EN` VARCHAR(100) NOT NULL,
  `TOTAL_SEATS` INT UNSIGNED NOT NULL,
  `BUDGET_SEATS` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`FACULTY_ID`),
  UNIQUE INDEX `name_UNIQUE` (`NAME_RU` ASC) VISIBLE,
  UNIQUE INDEX `name_eng_UNIQUE` (`NAME_EN` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University_Admissions`.`SUBJECT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`SUBJECT` (
  `SUBJECT_ID` INT NOT NULL AUTO_INCREMENT,
  `NAME_RU` VARCHAR(45) NOT NULL,
  `NAME_EN` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`SUBJECT_ID`),
  UNIQUE INDEX `name_UNIQUE` (`NAME_RU` ASC) VISIBLE,
  UNIQUE INDEX `name_eng_UNIQUE` (`NAME_EN` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University_Admissions`.`FACULTY_ENTRANTS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`FACULTY_ENTRANTS` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ENTRANT_ID` INT NOT NULL,
  `FACULTY_ID` INT NOT NULL,
  PRIMARY KEY (`ID`, `ENTRANT_ID`, `FACULTY_ID`),
  INDEX `fk_Entrant_has_Faculty_Faculty1_idx` (`FACULTY_ID` ASC) VISIBLE,
  INDEX `fk_Entrant_has_Faculty_Entrant1_idx` (`ENTRANT_ID` ASC) VISIBLE,
  UNIQUE INDEX `idFacultyEntrants_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Entrant_has_Faculty_Entrant1`
    FOREIGN KEY (`ENTRANT_ID`)
    REFERENCES `University_Admissions`.`ENTRANT` (`ENTRANT_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entrant_has_Faculty_Faculty1`
    FOREIGN KEY (`FACULTY_ID`)
    REFERENCES `University_Admissions`.`FACULTY` (`FACULTY_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University_Admissions`.`FACULTY_SUBJECTS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`FACULTY_SUBJECTS` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `FACULTY_ID` INT NOT NULL,
  `SUBJECT_ID` INT NOT NULL,
  PRIMARY KEY (`ID`, `FACULTY_ID`, `SUBJECT_ID`),
  INDEX `fk_Faculty_has_Subject_Subject1_idx` (`SUBJECT_ID` ASC) VISIBLE,
  INDEX `fk_Faculty_has_Subject_Faculty1_idx` (`FACULTY_ID` ASC) VISIBLE,
  UNIQUE INDEX `idFacultySubjects_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Faculty_has_Subject_Faculty1`
    FOREIGN KEY (`FACULTY_ID`)
    REFERENCES `University_Admissions`.`FACULTY` (`FACULTY_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Faculty_has_Subject_Subject1`
    FOREIGN KEY (`SUBJECT_ID`)
    REFERENCES `University_Admissions`.`SUBJECT` (`SUBJECT_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `University_Admissions`.`MARK`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`MARK` (
  `MARK_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ENTRANT_ID` INT NOT NULL,
  `SUBJECT_ID` INT NOT NULL,
  `MARK` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`MARK_ID`, `ENTRANT_ID`, `SUBJECT_ID`),
  INDEX `fk_Entrant_has_Subject_Subject1_idx` (`SUBJECT_ID` ASC) VISIBLE,
  INDEX `fk_Entrant_has_Subject_Entrant1_idx` (`ENTRANT_ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`MARK_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Entrant_has_Subject_Entrant1`
    FOREIGN KEY (`ENTRANT_ID`)
    REFERENCES `University_Admissions`.`ENTRANT` (`ENTRANT_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entrant_has_Subject_Subject1`
    FOREIGN KEY (`SUBJECT_ID`)
    REFERENCES `University_Admissions`.`SUBJECT` (`SUBJECT_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `University_Admissions` ;

-- -----------------------------------------------------
-- Placeholder table for view `University_Admissions`.`FACULTY_ENTRANT_FULL_SCORE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`FACULTY_ENTRANT_FULL_SCORE` (`'FACULTY_ID'` INT, `'ENTRANT_ID'` INT, `'TOTAL_POINT_SCORE'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `University_Admissions`.`FACULTIES_REPORT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `University_Admissions`.`FACULTIES_REPORT` (`FACULTY_ID` INT, `'FACULTY_NAME_RU'` INT, `'FACULTY_NAME_EN'` INT, `IIN` INT, `FIRST_NAME` INT, `LAST_NAME` INT, `SECOND_NAME` INT, `TOTAL_POINT_SCORE` INT);

-- -----------------------------------------------------
-- View `University_Admissions`.`FACULTY_ENTRANT_FULL_SCORE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `University_Admissions`.`FACULTY_ENTRANT_FULL_SCORE`;
USE `University_Admissions`;
CREATE  OR REPLACE VIEW `FACULTY_ENTRANT_FULL_SCORE` AS
SELECT university_admissions.faculty_entrants.FACULTY_ID as 'FACULTY_ID',
university_admissions.mark.ENTRANT_ID as 'ENTRANT_ID',
SUM(university_admissions.mark.MARK) as 'TOTAL_POINT_SCORE'
FROM university_admissions.faculty_entrants INNER JOIN university_admissions.mark ON university_admissions.faculty_entrants.ENTRANT_ID=university_admissions.mark.ENTRANT_ID
GROUP BY university_admissions.faculty_entrants.FACULTY_ID,university_admissions.faculty_entrants.ENTRANT_ID;

-- -----------------------------------------------------
-- View `University_Admissions`.`FACULTIES_REPORT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `University_Admissions`.`FACULTIES_REPORT`;
USE `University_Admissions`;
CREATE  OR REPLACE VIEW `FACULTIES_REPORT` AS 
SELECT university_admissions.faculty_entrant_full_score.FACULTY_ID,
university_admissions.faculty.NAME_RU as 'FACULTY_NAME_RU',
university_admissions.faculty.NAME_EN as 'FACULTY_NAME_EN',
university_admissions.entrant.IIN,
university_admissions.user.FIRST_NAME,
university_admissions.user.LAST_NAME,
university_admissions.user.SECOND_NAME,
university_admissions.faculty_entrant_full_score.TOTAL_POINT_SCORE
FROM university_admissions.faculty_entrant_full_score 
INNER JOIN university_admissions.faculty ON 
university_admissions.faculty_entrant_full_score.FACULTY_ID=university_admissions.faculty.FACULTY_ID
INNER JOIN university_admissions.entrant ON 
university_admissions.faculty_entrant_full_score.ENTRANT_ID=university_admissions.entrant.ENTRANT_ID
INNER JOIN university_admissions.user ON
university_admissions.entrant.USER_ID=university_admissions.user.USER_ID
 ORDER BY FACULTY_ID ASC,TOTAL_POINT_SCORE DESC;
USE `University_Admissions`;

DELIMITER $$
USE `University_Admissions`$$
CREATE DEFINER = CURRENT_USER TRIGGER `University_Admissions`.`USER_BEFORE_INSERT` BEFORE INSERT ON `USER` FOR EACH ROW
BEGIN
IF NEW.date_of_birth>current_date() THEN
signal sqlstate '45000'
SET message_text='Your date of birth has not yet come.';
END IF;
END$$

USE `University_Admissions`$$
CREATE DEFINER = CURRENT_USER TRIGGER `University_Admissions`.`ENTRANT_BEFORE_INSERT` BEFORE INSERT ON `ENTRANT` FOR EACH ROW
BEGIN
IF(SELECT user.role from user where user.user_id = NEW.user_id )='admin' THEN
signal sqlstate '45000'
SET 
    message_text='Admin can not have a entrant record.';
END IF;
END$$

USE `University_Admissions`$$
CREATE DEFINER = CURRENT_USER TRIGGER `University_Admissions`.`FACULTY_BEFORE_INSERT` BEFORE INSERT ON `FACULTY` FOR EACH ROW
BEGIN
IF NEW.total_seats<NEW.budget_seats THEN
signal sqlstate '45000'
SET message_text='Total seats is less than Budget seats!';
END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
